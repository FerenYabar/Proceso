{"ast":null,"code":"import _asyncToGenerator from \"/home/fernando/Documents/completo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class LoginService {\n  constructor(route, http) {\n    this.route = route;\n    this.http = http;\n    this.Usuario = '';\n    this.Contrasena = '';\n    this.usuarios = [];\n  }\n\n  Validacion(usuario, contrasena) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield localStorage.setItem(\"usuarioactivo\", \"\");\n      yield localStorage.setItem(\"localactivo\", \"\");\n      yield localStorage.setItem(\"adminactivo\", \"\");\n      yield _this.validarusuario(usuario, contrasena); //const respuesta=await fetch('http://127.0.0.1:8080/api/usuariologin'+\"/\"+usuario+\"/\"+contrasena).pro\n      //console.log(respuesta.json())\n      //if(respuesta!=null){\n      //  return true\n      //}\n\n      if (yield _this.validarusuario(usuario, contrasena)) {\n        return true;\n      }\n\n      if (yield _this.validarlocal(usuario, contrasena)) {\n        console.log(\"pri\");\n        return true;\n      }\n\n      if ((yield usuario) == 'admin' && contrasena == '123') {\n        return true;\n      } else {\n        return false;\n      }\n    })();\n  }\n\n  validarusuario(usuario, contrasena) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let usuarioact = 0;\n      yield _this2.http.get('http://127.0.0.1:8080/api/usuariologin' + \"/\" + usuario + \"/\" + contrasena).toPromise().then(resp => {\n        if (resp != null) {\n          usuarioact = resp;\n          localStorage.setItem(\"usuarioactivo\", resp.toString());\n        }\n\n        ;\n      });\n      console.log(usuarioact);\n\n      if (usuarioact == 0) {\n        return false;\n      } else {\n        localStorage.getItem(\"usuarioactivo\", usuarioact.toString);\n        return true;\n      }\n    })();\n  }\n\n  validarlocal(usuario, contrasena) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let localact = 0;\n      yield _this3.http.get('http://127.0.0.1:8080/api/locallogin' + \"/\" + usuario + \"/\" + contrasena).subscribe(resp => {\n        if (resp != null) {\n          localact = resp;\n          localStorage.setItem(\"localactivo\", resp.toString());\n        }\n\n        ;\n      });\n      console.log(localact);\n\n      if (localact == 0) {\n        return false;\n      } else {\n        return true;\n      }\n    })();\n  }\n\n  ingresar() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (yield _this4.Validacion(_this4.Usuario, _this4.Contrasena)) {\n        _this4.route.navigate(['categorias']);\n      } else {\n        alert('Invalido el usuario y contraseña');\n      }\n    })();\n  }\n\n}\n\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\n\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});\nexport const adminactivo = [];\nexport const usuarioactivo = [];\nexport const localactivo = [];","map":{"version":3,"sources":["/home/fernando/Documents/completo/src/app/login/login-main/services/login.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Usuario, usuarios } from 'src/app/modelo/usuario.class';\nimport { Router } from '@angular/router';\nimport { locales, Local } from '../../../modelo/local.class';\nimport { HttpClient } from '@angular/common/http';\n\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor(private route:Router,private http:HttpClient) { }\n  Usuario:string=''\n  Contrasena:string=''\n  usuarios:Usuario[]=[]\n  \n\n  async Validacion(usuario:string,contrasena:string):Promise<Boolean>{\n    await localStorage.setItem(\"usuarioactivo\",\"\")\n    await localStorage.setItem(\"localactivo\",\"\")\n    await localStorage.setItem(\"adminactivo\",\"\")\n    await this.validarusuario(usuario,contrasena)\n    \n    //const respuesta=await fetch('http://127.0.0.1:8080/api/usuariologin'+\"/\"+usuario+\"/\"+contrasena).pro\n    //console.log(respuesta.json())\n    //if(respuesta!=null){\n    //  return true\n    //}\n    if (await this.validarusuario(usuario,contrasena) ){\n      \n      return true\n    \n    } \n    \n    if (await this.validarlocal(usuario,contrasena)) {\n      console.log(\"pri\")\n      return true\n    \n    } \n    if(await usuario=='admin' && contrasena=='123') {\n      return true\n    }\n    \n    else{\n      return false\n    }\n\n    \n}\n  async validarusuario(usuario:string,contrasena:string):Promise<Boolean>{\n    let usuarioact:number=0\n    await this.http.get<number>('http://127.0.0.1:8080/api/usuariologin'+\"/\"+usuario+\"/\"+contrasena).toPromise().then(((resp:number)=>{if (resp!=null){usuarioact=resp ;localStorage.setItem(\"usuarioactivo\",resp.toString());};}));\n    console.log(usuarioact)\n    if (usuarioact==0){\n      return false\n    }\n    else{\n      localStorage.getItem(\"usuarioactivo\",usuarioact.toString)\n    return true}\n    }\n    async validarlocal(usuario:string,contrasena:string):Promise<Boolean>{\n      let localact:number=0\n      await this.http.get<number>('http://127.0.0.1:8080/api/locallogin'+\"/\"+usuario+\"/\"+contrasena).subscribe((resp:number)=>{if (resp!=null){localact=resp;localStorage.setItem(\"localactivo\",resp.toString());};});\n      console.log(localact)\n      if (localact==0){\n        return false\n      }\n      else{\n      return true}\n      }\n    \n  \n\n\n\n  \n\n\n  async ingresar(){   \n    if(await this.Validacion(this.Usuario,this.Contrasena)){\n      this.route.navigate(['categorias'])\n    }\n    else{\n      alert('Invalido el usuario y contraseña')\n    }\n  }\n}\nexport const adminactivo:String[]=[]\nexport const usuarioactivo:Usuario[]=[]\nexport const localactivo:Local[]=[]\n\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}